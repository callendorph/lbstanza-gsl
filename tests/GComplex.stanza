#use-added-syntax(tests)
defpackage gsl/tests/GComplex :
  import core
  import gsl/GComplex

val epsilon = 1.0e-3
#if-defined(TESTING) :
  defn almost-equal (obs, exp) -> True|False :
    abs(obs - exp) < epsilon


deftest(gcomplex) gsl-gcomplex-basic:

  var a = GComplex(1.0, 2.0)
  #EXPECT(real(a) == 1.0)
  #EXPECT(imag(a) == 2.0)

  a = GComplex()
  #EXPECT(real(a) == 0.0)
  #EXPECT(imag(a) == 0.0)

  a = GComplexPolar(1.0, 2.0)
  #EXPECT(almost-equal(real(a), -0.4161))
  #EXPECT(almost-equal(imag(a), 0.9093))

deftest(gcomplex) gsl-gcomplex-to-string:
  var a = GComplex(1.0, 2.0)
  #EXPECT(real(a) == 1.0)
  #EXPECT(imag(a) == 2.0)

  var gcStr = to-string("%~" % [a])
  #EXPECT(gcStr == "(1.0+2.0i)")

  a = GComplex(1.0, -2.0)
  #EXPECT(real(a) == 1.0)
  #EXPECT(imag(a) == -2.0)

  gcStr = to-string("%~" % [a])
  #EXPECT(gcStr == "(1.0-2.0i)")

  a = GComplex(-1.0, -2.0)
  #EXPECT(real(a) == -1.0)
  #EXPECT(imag(a) == -2.0)

  gcStr = to-string("%~" % [a])
  #EXPECT(gcStr == "(-1.0-2.0i)")

deftest(gcomplex) gsl-gcomplex-funcs:

  var a = GComplexPolar(1.0, 2.0)
  #EXPECT(almost-equal(arg(a), 2.0))
  #EXPECT(abs(a) == 1.0)
  #EXPECT(abs2(a) == 1.0)
  #EXPECT(almost-equal(logabs(a), 0.0))

  a = GComplex(1.0, 2.0)
  #EXPECT(almost-equal(arg(a), 1.1071))
  #EXPECT(almost-equal(abs(a), 2.236))
  #EXPECT(almost-equal(abs2(a), 4.999696))
  #EXPECT(almost-equal(logabs(a), 0.8047))

deftest(gcomplex) gsl-gcomplex-operators:

  var a = GComplex(1.0, 2.0)
  var b = GComplex(-1.5, 4.0)

  var c = a + b

  #EXPECT(real(c) == -0.5)
  #EXPECT(imag(c) == 6.0)

  c = b + a

  #EXPECT(real(c) == -0.5)
  #EXPECT(imag(c) == 6.0)

  c = a - b

  #EXPECT(real(c) == 2.5)
  #EXPECT(imag(c) == -2.0)

  c = b - a

  #EXPECT(real(c) == -2.5)
  #EXPECT(imag(c) == 2.0)

  c = a * b

  #EXPECT(real(c) == -9.5)
  #EXPECT(imag(c) == 1.0)

  c = b * a

  #EXPECT(real(c) == -9.5)
  #EXPECT(imag(c) == 1.0)

  c = a / b

  #EXPECT(almost-equal(real(c), 0.35616))
  #EXPECT(almost-equal(imag(c), -0.3836))

  c = b / a

  #EXPECT(almost-equal(real(c), 1.3))
  #EXPECT(almost-equal(imag(c), 1.4))

deftest(gcomplex) gsl-gcomplex-double-operators:

  var a = GComplex(1.0, 2.0)
  var b = 2.0

  var c = a + b

  #EXPECT(real(c) == 3.0)
  #EXPECT(imag(c) == 2.0)

  c = b + a

  #EXPECT(real(c) == 3.0)
  #EXPECT(imag(c) == 2.0)


  c = a - b

  #EXPECT(real(c) == -1.0)
  #EXPECT(imag(c) == 2.0)

  c = b - a

  #EXPECT(real(c) == 1.0)
  #EXPECT(imag(c) == -2.0)

  c = a * b

  #EXPECT(real(c) == 2.0)
  #EXPECT(imag(c) == 4.0)

  c = b * a

  #EXPECT(real(c) == 2.0)
  #EXPECT(imag(c) == 4.0)

  c = a / b

  #EXPECT(real(c) == 0.5)
  #EXPECT(imag(c) == 1.0)

  c = b / a

  #EXPECT(almost-equal(real(c), 0.4))
  #EXPECT(almost-equal(imag(c), -0.8))

deftest(gcomplex) gsl-gcomplex-elem-funcs:

  var a = GComplex(-1.5, 4.0)

  var c:GComplex = sqrt(a)
  #EXPECT(almost-equal(real(c), 1.1773))
  #EXPECT(almost-equal(imag(c), 1.6988))

  var b = -4.0

  c = sqrt(b)
  #EXPECT(almost-equal(real(c), 0.0))
  #EXPECT(almost-equal(imag(c), 2.0))

  var d = GComplex(0.3, 0.4)

  c = pow(a, d)
  #EXPECT(almost-equal(real(c), 0.2855))
  #EXPECT(almost-equal(imag(c), 0.65495))

  b = 0.75
  c = pow(a, b)
  #EXPECT(almost-equal(real(c), 0.3664))
  #EXPECT(almost-equal(imag(c), 2.9488))

deftest(gcomplex) gsl-gcomplex-trig-funcs:

  var a = GComplex(-1.5, 4.0)

  var c:GComplex = sin(a)
  #EXPECT(almost-equal(real(c), -27.2398))
  #EXPECT(almost-equal(imag(c), 1.93041))

  c = cos(a)
  #EXPECT(almost-equal(real(c), 1.93171))
  #EXPECT(almost-equal(imag(c), 27.2216))

  var b = GComplex(-0.5, 1.2)
  c = tan(b)
  #EXPECT(almost-equal(real(c), -0.1380))
  #EXPECT(almost-equal(imag(c), 0.8965))

  c = sec(b)
  #EXPECT(almost-equal(real(c), 0.5212))
  #EXPECT(almost-equal(imag(c), -0.23738))

  c = csc(b)
  #EXPECT(almost-equal(real(c), -0.3461))
  #EXPECT(almost-equal(imag(c), -0.5281))

  c = cot(b)
  #EXPECT(almost-equal(real(c), -0.1677))
  #EXPECT(almost-equal(imag(c), -1.0896))

deftest(gcomplex) gsl-gcomplex-inv-trig-funcs:

  var a = GComplex(-1.5, 4.0)

  var c:GComplex = arcsin(a)
  #EXPECT(almost-equal(real(c), -0.350))
  #EXPECT(almost-equal(imag(c), 2.1555))

  c = arccos(a)
  #EXPECT(almost-equal(real(c), 1.9208))
  #EXPECT(almost-equal(imag(c), -2.1555))

  var b = GComplex(-0.5, 1.2)
  c = arctan(b)
  #EXPECT(almost-equal(real(c), -1.087))
  #EXPECT(almost-equal(imag(c), 0.7163))

  c = arcsec(b)
  #EXPECT(almost-equal(real(c), 1.81195))
  #EXPECT(almost-equal(imag(c), 0.67805))

  c = arccsc(b)
  #EXPECT(almost-equal(real(c), -0.24115))
  #EXPECT(almost-equal(imag(c), -0.67805))

  c = arccot(b)
  #EXPECT(almost-equal(real(c), -0.4834))
  #EXPECT(almost-equal(imag(c), -0.7163))

  ; Inverse with real-value arguments

  c = arccos(1.25)
  #EXPECT(almost-equal(real(c), 0.0))
  #EXPECT(almost-equal(imag(c), 0.6931))

  c = arcsec(0.5)
  #EXPECT(almost-equal(real(c), 0.0))
  #EXPECT(almost-equal(imag(c), 1.31696))

  c = arccsc(0.5)
  #EXPECT(almost-equal(real(c), 1.5708))
  #EXPECT(almost-equal(imag(c), -1.31696))

deftest(gcomplex) gsl-gcomplex-hyper-trig-funcs:

  var a = GComplex(-1.5, 4.0)

  var c:GComplex = sinh(a)
  #EXPECT(almost-equal(real(c), 1.3918))
  #EXPECT(almost-equal(imag(c), -1.7803))

  c = cosh(a)
  #EXPECT(almost-equal(real(c), -1.5376))
  #EXPECT(almost-equal(imag(c), 1.6114))

  c = tanh(a)
  #EXPECT(almost-equal(real(c), -1.00965))
  #EXPECT(almost-equal(imag(c), 0.09971))

  c = sech(a)
  #EXPECT(almost-equal(real(c), -0.3099))
  #EXPECT(almost-equal(imag(c), -0.3248))

  c = csch(a)
  #EXPECT(almost-equal(real(c), 0.2725))
  #EXPECT(almost-equal(imag(c), 0.3486))

  c = coth(a)
  #EXPECT(almost-equal(real(c), -0.9809))
  #EXPECT(almost-equal(imag(c), -0.0969))

deftest(gcomplex) gsl-gcomplex-inv-hyper-trig-funcs:

  var a = GComplex(-1.5, 4.0)

  var c:GComplex = arcsinh(a)
  #EXPECT(almost-equal(real(c), -2.1349))
  #EXPECT(almost-equal(imag(c), 1.2027))

  c = arccosh(a)
  #EXPECT(almost-equal(real(c), 2.1555))
  #EXPECT(almost-equal(imag(c), 1.920831))

  c = arctanh(a)
  #EXPECT(almost-equal(real(c), -0.0786))
  #EXPECT(almost-equal(imag(c), 1.35367))

  c = arcsech(a)
  #EXPECT(almost-equal(real(c), 0.2182))
  #EXPECT(almost-equal(imag(c), -1.6512))

  c = arccsch(a)
  #EXPECT(almost-equal(real(c), -0.0841))
  #EXPECT(almost-equal(imag(c), -0.22018))

  c = arccoth(a)
  #EXPECT(almost-equal(real(c), -0.0786))
  #EXPECT(almost-equal(imag(c), -0.2171))

  ; Inverse with real-value arguments

  c = arccosh(-1.25)
  #EXPECT(almost-equal(real(c), 0.6931))
  #EXPECT(almost-equal(imag(c), 3.1416))

  c = arctanh(4.0)
  #EXPECT(almost-equal(real(c), 0.2554))
  #EXPECT(almost-equal(imag(c), -1.570796))

