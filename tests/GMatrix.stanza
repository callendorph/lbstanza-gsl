#use-added-syntax(tests)
defpackage gsl/tests/GMatrix :
  import core
  import gsl/GMatrix
  import gsl/GVector
  import gsl/Errors

#if-defined(TESTING) :
  public defn expect-throw (f) -> [True|False, String] :
    try :
      val unexpected = f()
      [false, "No Exception Thrown"]
    catch (e:Exception) :
      val msg = to-string("%~" % [e])
      [true, msg]

deftest(gmatrix) gsl-gmatrix-basic:
  val a = GMatrix(2,2)

  a[0,0] = 1.0
  a[0,1] = 2.0
  a[1,0] = 3.0
  a[1,1] = 4.0

  #EXPECT(a[0,0] == 1.0)
  #EXPECT(a[0,1] == 2.0)
  #EXPECT(a[1,0] == 3.0)
  #EXPECT(a[1,1] == 4.0)

  set-identity(a)

  #EXPECT(a[0,0] == 1.0)
  #EXPECT(a[0,1] == 0.0)
  #EXPECT(a[1,0] == 0.0)
  #EXPECT(a[1,1] == 1.0)

  set-zero(a)

  #EXPECT(a[0,0] == 0.0)
  #EXPECT(a[0,1] == 0.0)
  #EXPECT(a[1,0] == 0.0)
  #EXPECT(a[1,1] == 0.0)

  set-all(a, 2.0)

  #EXPECT(a[0,0] == 2.0)
  #EXPECT(a[0,1] == 2.0)
  #EXPECT(a[1,0] == 2.0)
  #EXPECT(a[1,1] == 2.0)

  #EXPECT(rows(a) == 2)
  #EXPECT(columns(a) == 2)

  val content = to-string("%~" % [a])
  #EXPECT(content == "GMatrix: 2 x 2\n\t[2.0, 2.0]\n\t[2.0, 2.0]\n")

deftest(gmatrix) gsl-matrix-transpose:

  val a = GMatrix(2,2)

  a[0,0] = 1.0
  a[0,1] = 2.0
  a[1,0] = 3.0
  a[1,1] = 4.0

  transpose!(a)

  #EXPECT(a[0,0] == 1.0)
  #EXPECT(a[0,1] == 3.0)
  #EXPECT(a[1,0] == 2.0)
  #EXPECT(a[1,1] == 4.0)

  val b = GMatrix(3, 2)

  #EXPECT(rows(b) == 3)
  #EXPECT(columns(b) == 2)

  b[0,0] = 1.0
  b[0,1] = 2.0
  b[1,0] = 3.0
  b[1,1] = 4.0
  b[2,0] = 5.0
  b[2,1] = 6.0

  val c = transpose(b)

  #EXPECT(rows(c) == 2)
  #EXPECT(columns(c) == 3)

  #EXPECT(c[0,0] == 1.0)
  #EXPECT(c[0,1] == 3.0)
  #EXPECT(c[0,2] == 5.0)
  #EXPECT(c[1,0] == 2.0)
  #EXPECT(c[1,1] == 4.0)
  #EXPECT(c[1,2] == 6.0)

deftest(gmatrix) gsl-gmatrix-operators:

  val a = GMatrix(2,2)

  a[0,0] = 1.0
  a[0,1] = 2.0
  a[1,0] = 3.0
  a[1,1] = 4.0

  val b = GMatrix(2,2)

  b[0,0] = 4.0
  b[0,1] = 5.0
  b[1,0] = 6.0
  b[1,1] = 7.0

  var c = a + b

  #EXPECT(c[0,0] == 5.0)
  #EXPECT(c[0,1] == 7.0)
  #EXPECT(c[1,0] == 9.0)
  #EXPECT(c[1,1] == 11.0)

  c = b + a

  #EXPECT(c[0,0] == 5.0)
  #EXPECT(c[0,1] == 7.0)
  #EXPECT(c[1,0] == 9.0)
  #EXPECT(c[1,1] == 11.0)

  c = a - b

  #EXPECT(c[0,0] == -3.0)
  #EXPECT(c[0,1] == -3.0)
  #EXPECT(c[1,0] == -3.0)
  #EXPECT(c[1,1] == -3.0)

  c = b - a

  #EXPECT(c[0,0] == 3.0)
  #EXPECT(c[0,1] == 3.0)
  #EXPECT(c[1,0] == 3.0)
  #EXPECT(c[1,1] == 3.0)

  c = a * b

  #EXPECT(c[0,0] == 4.0)
  #EXPECT(c[0,1] == 10.0)
  #EXPECT(c[1,0] == 18.0)
  #EXPECT(c[1,1] == 28.0)

  c = b * a

  #EXPECT(c[0,0] == 4.0)
  #EXPECT(c[0,1] == 10.0)
  #EXPECT(c[1,0] == 18.0)
  #EXPECT(c[1,1] == 28.0)

  c = a / b

  #EXPECT(c[0,0] == 0.25)
  #EXPECT(c[0,1] == 0.4)
  #EXPECT(c[1,0] == 0.5)
  #EXPECT(c[1,1] == 4.0 / 7.0)

  c = b / a

  #EXPECT(c[0,0] == 4.0)
  #EXPECT(c[0,1] == 2.5)
  #EXPECT(c[1,0] == 2.0)
  #EXPECT(c[1,1] == 7.0 / 4.0)

deftest(gmatrix) gsl-gmatrix-constant-operators:

  val a = GMatrix(2,2)

  a[0,0] = 1.0
  a[0,1] = 2.0
  a[1,0] = 3.0
  a[1,1] = 4.0

  val b = 2.0

  var c = a + b

  #EXPECT(c[0,0] == 3.0)
  #EXPECT(c[0,1] == 4.0)
  #EXPECT(c[1,0] == 5.0)
  #EXPECT(c[1,1] == 6.0)

  c = b + a

  #EXPECT(c[0,0] == 3.0)
  #EXPECT(c[0,1] == 4.0)
  #EXPECT(c[1,0] == 5.0)
  #EXPECT(c[1,1] == 6.0)

  c = a - b

  #EXPECT(c[0,0] == -1.0)
  #EXPECT(c[0,1] == 0.0)
  #EXPECT(c[1,0] == 1.0)
  #EXPECT(c[1,1] == 2.0)

  c = b - a

  #EXPECT(c[0,0] == 1.0)
  #EXPECT(c[0,1] == 0.0)
  #EXPECT(c[1,0] == -1.0)
  #EXPECT(c[1,1] == -2.0)

  c = a * b

  #EXPECT(c[0,0] == 2.0)
  #EXPECT(c[0,1] == 4.0)
  #EXPECT(c[1,0] == 6.0)
  #EXPECT(c[1,1] == 8.0)

  c = b * a

  #EXPECT(c[0,0] == 2.0)
  #EXPECT(c[0,1] == 4.0)
  #EXPECT(c[1,0] == 6.0)
  #EXPECT(c[1,1] == 8.0)

  c = a / b

  #EXPECT(c[0,0] == 0.5)
  #EXPECT(c[0,1] == 1.0)
  #EXPECT(c[1,0] == 1.5)
  #EXPECT(c[1,1] == 2.0)

  c = b / a

  #EXPECT(c[0,0] == 2.0)
  #EXPECT(c[0,1] == 1.0)
  #EXPECT(c[1,0] == 2.0 / 3.0)
  #EXPECT(c[1,1] == 0.5)

deftest(gmatrix) gsl-gmatrix-operator-errors:

  set-error-handler-off()

  val a = GMatrix(2,2)
  set-zero(a)

  val b = GMatrix(3,3)
  set-identity(b)

  val invalid-math = [
    {a + b},
    {a - b},
    {a * b},
    {a / b},
  ]

  for failFunc in invalid-math do :
    val [throws, msg] = expect-throw(failFunc)
    #EXPECT( throws )
    #EXPECT(index-of-chars(msg, "sizes are not conformant") != false)

  reset-error-handler()


deftest(gmatrix) gsl-gmatrix-min-max:

  val a = GMatrix(2,2)

  a[0,0] = 1.0
  a[0,1] = 2.0
  a[1,0] = 3.0
  a[1,1] = 4.0

  #EXPECT(maximum(a) == 4.0)
  #EXPECT(minimum(a) == 1.0)

  val [min, max] = minmax(a)
  #EXPECT(min == 1.0)
  #EXPECT(max == 4.0)

  #EXPECT(argmin(a) == [0,0])
  #EXPECT(argmax(a) == [1,1])

  #EXPECT(argminmax(a) == [[0,0], [1,1]])

deftest(gmatrix) gsl-matrix-utils:

  var a = GMatrix(2,2)

  a[0,0] = 1.0
  a[0,1] = 2.0
  a[1,0] = 3.0
  a[1,1] = 4.0

  #EXPECT(not zero?(a))
  #EXPECT(not negative?(a))
  #EXPECT(positive?(a))
  #EXPECT(non-negative?(a))

  a[0,0] = -1.0
  a[0,1] = 2.0
  a[1,0] = 3.0
  a[1,1] = 4.0

  #EXPECT(not zero?(a))
  #EXPECT(not negative?(a))
  #EXPECT(not positive?(a))
  #EXPECT(not non-negative?(a))

  set-zero(a)

  #EXPECT(zero?(a))
  #EXPECT(not negative?(a))
  #EXPECT(not positive?(a))
  #EXPECT(non-negative?(a))

  set-all(a, -1.0)
  #EXPECT(not zero?(a))
  #EXPECT(negative?(a))
  #EXPECT(not positive?(a))
  #EXPECT(not non-negative?(a))

deftest(gmatrix) gsl-matrix-rowcol-vectors:

  var a = GMatrix(3,3)
  set-identity(a)

  var r2 = get-row(a, 2)
  #EXPECT(length(r2) == 3)
  #EXPECT(r2[0] == 0.0)
  #EXPECT(r2[1] == 0.0)
  #EXPECT(r2[2] == 1.0)

  var c1 = get-column(a, 1)
  #EXPECT(length(c1) == 3)
  #EXPECT(c1[0] == 0.0)
  #EXPECT(c1[1] == 1.0)
  #EXPECT(c1[2] == 0.0)

  r2[0] = 10.0

  set-row(a, 2, r2)

  var c0 = get-column(a, 0)
  #EXPECT(length(c0) == 3)
  #EXPECT(c0[0] == 1.0)
  #EXPECT(c0[1] == 0.0)
  #EXPECT(c0[2] == 10.0)

  c1[2] = -5.0

  set-column(a, 1, c1)
  r2 = get-row(a, 2)
  #EXPECT(r2[0] == 10.0)
  #EXPECT(r2[1] == -5.0)
  #EXPECT(r2[2] == 1.0)

deftest(gmatrix) gsl-matrix-swap-rows:

  var a = GMatrix(4,4)
  set-identity(a)

  var r1 = get-row(a, 1)
  #EXPECT(length(r1) == 4)
  #EXPECT(r1[0] == 0.0)
  #EXPECT(r1[1] == 1.0)
  #EXPECT(r1[2] == 0.0)
  #EXPECT(r1[3] == 0.0)


  var r2 = get-row(a, 2)
  #EXPECT(length(r2) == 4)
  #EXPECT(r2[0] == 0.0)
  #EXPECT(r2[1] == 0.0)
  #EXPECT(r2[2] == 1.0)
  #EXPECT(r2[3] == 0.0)

  swap-rows(a, 1, 2)

  r1 = get-row(a, 1)
  #EXPECT(length(r1) == 4)
  #EXPECT(r1[0] == 0.0)
  #EXPECT(r1[1] == 0.0)
  #EXPECT(r1[2] == 1.0)
  #EXPECT(r1[3] == 0.0)

  r2 = get-row(a, 2)
  #EXPECT(length(r2) == 4)
  #EXPECT(r2[0] == 0.0)
  #EXPECT(r2[1] == 1.0)
  #EXPECT(r2[2] == 0.0)
  #EXPECT(r2[3] == 0.0)

deftest(gmatrix) gsl-matrix-swap-columns:

  var a = GMatrix(4,3)
  set-identity(a)

  var c1 = get-column(a, 1)
  #EXPECT(length(c1) == 4)
  #EXPECT(c1[0] == 0.0)
  #EXPECT(c1[1] == 1.0)
  #EXPECT(c1[2] == 0.0)
  #EXPECT(c1[3] == 0.0)

  var c2 = get-column(a, 2)
  #EXPECT(length(c2) == 4)
  #EXPECT(c2[0] == 0.0)
  #EXPECT(c2[1] == 0.0)
  #EXPECT(c2[2] == 1.0)
  #EXPECT(c2[3] == 0.0)

  swap-columns(a, 1, 2)

  c1 = get-column(a, 1)
  #EXPECT(length(c1) == 4)
  #EXPECT(c1[0] == 0.0)
  #EXPECT(c1[1] == 0.0)
  #EXPECT(c1[2] == 1.0)
  #EXPECT(c1[3] == 0.0)

  c2 = get-column(a, 2)
  #EXPECT(length(c2) == 4)
  #EXPECT(c2[0] == 0.0)
  #EXPECT(c2[1] == 1.0)
  #EXPECT(c2[2] == 0.0)
  #EXPECT(c2[3] == 0.0)

deftest(gmatrix) gsl-matrix-swap-row-for-column:

  var a = GMatrix(4,4)
  set-identity(a)

  var r = get-row(a,0)
  #EXPECT(length(r) == 4)
  #EXPECT(r[0] == 1.0)
  #EXPECT(r[1] == 0.0)
  #EXPECT(r[2] == 0.0)
  #EXPECT(r[3] == 0.0)

  var c = get-column(a, 3)
  #EXPECT(length(c) == 4)
  #EXPECT(c[0] == 0.0)
  #EXPECT(c[1] == 0.0)
  #EXPECT(c[2] == 0.0)
  #EXPECT(c[3] == 1.0)

  swap-row-for-column(a, 0, 3)

  r = get-row(a,0)
  #EXPECT(length(r) == 4)
  #EXPECT(r[0] == 0.0)
  #EXPECT(r[1] == 0.0)
  #EXPECT(r[2] == 0.0)
  #EXPECT(r[3] == 1.0)

  ; Note that this result isn't totally expected
  ;   I think it is due to the way that the
  ;   method works internally to GSL and the order
  ;   at which the row and column swap are applied.
  c = get-column(a, 3)
  #EXPECT(length(c) == 4)
  #EXPECT(c[0] == 1.0)
  #EXPECT(c[1] == 0.0)
  #EXPECT(c[2] == 0.0)
  #EXPECT(c[3] == 1.0)

